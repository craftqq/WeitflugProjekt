#BlueJ class context
comment0.params=server
comment0.target=ServerVerbindungen(java.net.ServerSocket)
comment1.params=
comment1.target=void\ incVerbindung()
comment10.params=serverPort
comment10.target=VerbindungServer\ getVerbindungServerPort(int)
comment11.params=
comment11.target=void\ finalize()
comment12.params=
comment12.target=boolean\ warteAufClient()
comment12.text=\r\n\ serverkanalAufbauen()\r\n\ \r\n\ wartet\ auf\ Soccket-Anfrage\ vom\ Client\r\n
comment13.params=timeout
comment13.target=boolean\ warteAufClient(int)
comment13.text=\r\n\ serverkanalAufbauen()\r\n\ \r\n\ wartet\ auf\ Soccket-Anfrage\ vom\ Client\r\n\ \r\n\ Nach\ timeout\ ms\ wird\ abgebrochen\r\n
comment14.params=timeout
comment14.target=boolean\ warteAufClientSpezial(int)
comment14.text=\r\n\ serverkanalAufbauen()\r\n\ \r\n\ wartet\ auf\ Soccket-Anfrage\ vom\ Client\r\n\ \r\n\ Nach\ timeout\ ms\ wird\ abgebrochen\r\n
comment15.params=
comment15.target=int\ neuenServerportAufbauen()
comment15.text=\r\n\ Erzeugt\ eine\ neue\ Serververbindung\r\n\ \r\n\ Portnummer\ wird\ vom\ Betriebssystem\ zugeordnet\r\n\ \r\n\ Sie\ kann\ mit\ getServerport\ abgefragt\ werden\r\n\ \r\n\ @return\ serverport\ oder\ ERROR\r\n
comment16.params=
comment16.target=int\ getServerport()
comment16.text=\r\n\ gibt\ die\ portnummer\ zur\u00FCck\r\n\ \r\n\ @return\ serverport\r\n
comment17.params=socket
comment17.target=boolean\ verbindungAufbauen(java.net.Socket)
comment17.text=\r\n\ Baut\ eine\ Verbindung\ \u00FCber\ das\ gegebene\ Socket\ auf\r\n\ \r\n\ @param\ socket\r\n\ @return\ Erfolg\r\n
comment18.params=
comment18.target=int\ getClientPort()
comment18.text=\r\n\ F\u00FCr\ Server\:\r\n\ \r\n\ gibt\ den\ Port\ des\ angerufenen\ Client\ zur\u00FCck\r\n\ \r\n\ @return\ clientPort\r\n
comment19.params=
comment19.target=int\ getLocalPort()
comment19.text=\r\n\ gibt\ den\ eigenen\ Port\ zur\u00FCck\r\n\ \r\n\ @return\ serverport\r\n
comment2.params=
comment2.target=void\ decVerbindung()
comment20.params=iPSTART
comment20.target=java.lang.String\ getNonLocalIP(java.lang.String)
comment20.text=\r\n\ \u00D6ffenliche\ IP\ des\ Servers\r\n\ \r\n\ @param\ iPSTART\r\n\ \ \ \ \ \ \ \ \ \ \ \ //\ Start\ der\ IP-Adresse\ bei\ mehreren\ Server-IP-Adressen\r\n\ @return\r\n
comment21.params=
comment21.target=java.lang.String\ getClientIP()
comment22.params=
comment22.target=java.lang.String\ getClientName()
comment23.params=
comment23.target=void\ close()
comment23.text=\r\n\ Schlie\u00DFt\ die\ Verbindung\r\n\ \r\n
comment24.params=
comment24.target=java.lang.String\ readLine()
comment24.text=\r\n\ Liest\ einen\ String\r\n\ \r\n\ @return\ als\ String\r\n
comment25.params=zeile
comment25.target=void\ writeLine(java.lang.String)
comment25.text=\r\n\ Schreibt\ einen\ String\r\n\ \r\n
comment26.params=iError
comment26.target=int\ readInt(int)
comment26.text=\r\n\ Lesen\ eines\ Integer-Werts\r\n\ \r\n\ @return\ als\ int\r\n
comment27.params=number
comment27.target=void\ writeInt(int)
comment27.text=\r\n\ Schreiben\ eines\ Integer-Werts\r\n\ \r\n
comment28.params=dError
comment28.target=double\ readDouble(double)
comment28.text=\r\n\ Lesen\ eines\ Double-Werts\r\n\ \r\n\ @return\ als\ double\r\n
comment29.params=number
comment29.target=void\ writeDouble(double)
comment29.text=\r\n\ Schreiben\ eines\ Double-Werts\r\n\ \r\n
comment3.params=
comment3.target=boolean\ verbindungenVorhanden()
comment4.params=
comment4.target=void\ finalize()
comment5.params=serverPort
comment5.target=java.net.ServerSocket\ getServer(int)
comment6.params=server
comment6.target=void\ addServer(java.net.ServerSocket)
comment7.params=server
comment7.target=void\ serverEnfernen(java.net.ServerSocket)
comment8.params=
comment8.target=VerbindungServer()
comment8.text=\r\n\ Normaes\ IO-Modul\r\n
comment9.params=
comment9.target=VerbindungServer\ getVerbindungServerPort()
numComments=30
